// Gradle migrated to v6.2.1


buildscript {  
    repositories {
        mavenCentral()       
    }
     
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"      
        //classpath 'com.github.rholder:gradle-one-jar:1.0.4'          
     
    }
}



//plugins {
 //   id 'maven'
//}


apply plugin: 'io.codearte.nexus-staging'



allprojects {
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
//apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'java-library'
//apply plugin: 'de.marcphilipp.nexus-publish'  // check it out!

   
}

version = '1.0.1'

group = 'com.jpaulmorrison'


              

description = 'Function to generate FBP-style Javadoc for JavaFBP application source'

compileJava.options.encoding = 'UTF-8'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

mainClassName = 'com.jpaulmorrison.fbp.core.engine.JavaFBPCompAttrs  

nexusStaging {  
    username = ossrhUser
    password = ossrhPassword       
    
}

repositories {
    mavenCentral()
}

 
//sourceSets {
//   main {
//       java {            
//            exclude 'src/main/java/com/jpaulmorrison/fbp/doclets/*.*'
//            exclude '**/doclets/**'
  //      }
 //   }
 //}


dependencies { 	
	implementation files('src/dist/lib/tools.jar')
}
	
java {       
     withSourcesJar()
     withJavadocJar()
}


jar {
    archiveVersion = '1.0.1'
    manifest {
       attributes 'Implementation-Title': 'JavaFBP', 'Implementation-Version': archiveVersion,
             
        "Class-Path": configurations.compileClasspath.collect { it.getName() }.join(' '),       
         'Main-Class' : mainClassName
    }
      
       
    //baseName = project.name + '-all'
    archiveBaseName = project.name
    from sourceSets.main.output       
      
    dependsOn configurations.compileClasspath
   
    from {       
      configurations.compileClasspath.findAll {  it.name.endsWith('jar')  }.collect {   zipTree(it)  }  
      }
    
      
    exclude('com/sun/tools/internal/**')
    exclude('com/sun/tools/javac/**')
    exclude('com/sun/tools/doclets/**')
    exclude('com/sun/tools/jdi/**')
    exclude('com/sun/tools/classfile/**')
    exclude('com/sun/tools/corba/**')
    exclude('com/sun/xml/**')
     
}


if (JavaVersion.current().isJava8Compatible()) {   
        tasks.withType(Javadoc) {
            options.addBooleanOption('Xdoclint:none', true)
        }  
}



ext {
    snapshotPublicationRepository = "https://oss.sonatype.org/content/repositories/snapshots/"
    releasePublicationRepository = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"


//mainClassName = 'com.jpaulmorrison.fbp.core.engine.Network'
ossrhUser =  project.hasProperty('ossrhUser') ? project.property('ossrhUser') : ""
osshrPassword = project.hasProperty('osshrPassword') ? project.property('osshrPassword') : ""


}

// Used to generate initial maven-dir layout
task "create-dirs" { 
doLast {
description = "Create default maven directory structure" 
//} 
// {
   sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}
}



    publishing { 
  
  
    publications {
        mavenJava(MavenPublication) {
        
            groupId = 'com.jpaulmorrison'
            artifactId = 'javafbp'       
            version = '1.0.1'
           
            from components.java
           
                  
            pom {
                name = 'JavaFBPCompAttrs'
                description = 'Java implementation of Flow-Based Programming'
                 // groupId 'com.jpaulmorrison'
                 packaging 'jar'
         
               url = 'https://github.com/jpaulm/javafbpcompattrs'
               
               
           
                
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                    license {
                        name = 'GNU Lesser General Public License, Version 3.0'
                       url = 'https://www.gnu.org/licenses/lgpl-3.0.txt'
                     }
                }
                
          developers {
           developer {
             id = 'jpaulmorr'
             name = 'John Paul Rodker Morrison (Software architect/developer)'
             email = 'jpaulmorr@gmail.com'
           }
           
         }
        
      
        
        
                scm {
          connection = 'scm:git:git:https://github.com/jpaulm.git'
          developerConnection = 'scm:git:ssh:https://github.com/jpaulm.git'
          url = 'https://github.com/jpaulm.git'
        }
        
      
      
            }
        }
    }
    
    
    repositories {
    
       
        maven {
           
         
          
          url (version.endsWith('SNAPSHOT') ? snapshotPublicationRepository : releasePublicationRepository) 
          
         credentials {
                     username = ossrhUser
                     password = ossrhPassword   
                }
           
    
    }
}



signing {
    required {
        // signing is required if this is a release version and the artifacts are to be published
        !archiveVersion.toString().endsWith('-SNAPSHOT') && tasks.withType(PublishToMavenRepository).find {
             gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

} 